{"version":3,"file":"static/js/986.a6aaaf32.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList .jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact_form\":\"ContactForm_contact_form__MxVfX\",\"contact_label\":\"ContactForm_contact_label__hQuYE\",\"contact_input\":\"ContactForm_contact_input__pDruJ\",\"container\":\"ContactForm_container__qpJ1N\",\"title\":\"ContactForm_title__jZguf\",\"title_contacts\":\"ContactForm_title_contacts__cifKy\"};","\nimport { useState } from 'react';\nimport css from './ContactForm.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operation';\n\n\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  \n  const handleChange = ({ target: { name: inputName, value } }) => {\n    if (inputName === 'name') {\n      setName(value);\n    } else if (inputName === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit =   evt => {\n    evt.preventDefault();\n    const userName = contacts.items.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (userName) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const formData = { name, number };\n \n    dispatch(addContact(formData));\n    reset();\n  };\n  \n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (<section className={css.container}>\n       <h1 className={css.title}> Phonebook</h1>\n      <form className={css.contact_form} onSubmit={handleSubmit}>\n        <label className={css.contact_label}>Name:\n          <input\n            type=\"text\"\n            name=\"name\"\n                \n            value={name}\n            onChange={handleChange}\n            placeholder=\"Enter contact\"\n            pattern=\"[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            className={css.contact_input}\n          />\n        </label>\n             \n        <label className={css.contact_label}>\n          Number phone:\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            placeholder=\"Enter number phone\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            className={css.contact_input}\n          /></label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n            </section>\n    )\n  }\n\n\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"number\":\"ContactList_number__2af8f\",\"name\":\"ContactList_name__UCkFW\",\"total\":\"ContactList_total__PX5ig\",\"container\":\"ContactList_container__hYHc3\",\"title\":\"ContactList_title__gpugJ\",\"title_contacts\":\"ContactList_title_contacts__0Fmpc\"};","import css from './ContactList.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from 'redux/operation';\nimport { useEffect, useState } from 'react';\nimport { selectContacts,  selectFilterContacts } from 'redux/selectors';\n\nconst ContactList = () => {\n  const [totalContacts, setTotalContacts] = useState('');\nconst [sortedContacts, setSortedContacts] = useState([]);\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const visibleContact = useSelector(selectFilterContacts);\n  const total = contacts.items.length;\n \n  const handleDelete = (id) => dispatch(deleteContacts(id));\n useEffect(() => {\n    setTotalContacts(total);\n  }, [total]);\n  useEffect(() => {\n  // Коли visibleContact або її зміст змінюється, відсортовуємо контакти за іменем\n  const sorted = [...visibleContact].sort((a, b) => {\n    return a.name.localeCompare(b.name);\n  });\n  setSortedContacts(sorted);\n}, [visibleContact]);\n  \n  return (\n    visibleContact.length > 0 &&\n    <>\n      <div className={css.container}>\n\n      <h2>List Contacts</h2>\n        <p className={css.total}>Total contacts: {totalContacts}</p>\n         <ul className={css.list}>\n                {sortedContacts.map(contact => {\n                  const tel=`tel:${contact.number}`\n                  return (\n                    <li className={css.item} key={contact.id}>\n                 <span className={css.name}>{contact.name}:</span> \n                  <a href={tel} className={css.number}>{contact.number}</a> \n                    <button type=\"button\" onClick={()=>handleDelete(contact.id)}>Delete</button>\n              </li>\n            )\n          })}\n      </ul> \n          </div>\n             </>\n    )\n}\n\nexport default ContactList; ","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\",\"filter_block\":\"Filter_filter_block__1qvb0\",\"container\":\"Filter_container__L5eml\",\"title\":\"Filter_title__pSkfx\",\"title_contacts\":\"Filter_title_contacts__SYLYY\"};","import css from './Filter.module.css' \nimport { useDispatch, useSelector } from 'react-redux';\nimport {  setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nconst Filter = () => {\n      const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n    \n  const handleFilter = evt => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n    \n    return (\n      \n            <div className={css.container}>\n                <div className={css.filter_block}>\n\n            <label\n                className={css.label}\n                htmlFor=\"filter\">\n                Find contacts by name\n            </label>\n            <input\n                className={css.input}\n                id='filter'\n                name='filter'\n                type='text'\n                value={filter}\n                placeholder='name to search for'\n                onChange={handleFilter}\n                />\n                </div>\n        </div>\n                \n    )\n}\nexport default Filter\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList ';\nimport  Filter from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\n\nimport React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchContacts } from 'redux/operation';\nimport { selectIsLoading } from 'redux/selectors';\n\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\nconst isLoading = useSelector(selectIsLoading)\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <> \n      <ContactForm />\n      <Filter/>\n      { isLoading&&<Loader/>}\n       <ContactList />\n    </>\n    \n  )\n}\n\nexport default Contacts"],"names":["dispatch","useDispatch","contacts","useSelector","selectContacts","useState","name","setName","number","setNumber","handleChange","target","inputName","value","reset","className","css","onSubmit","evt","preventDefault","items","find","contact","toLowerCase","alert","formData","addContact","type","onChange","placeholder","pattern","title","required","totalContacts","setTotalContacts","sortedContacts","setSortedContacts","visibleContact","selectFilterContacts","total","length","useEffect","sorted","sort","a","b","localeCompare","map","tel","href","onClick","id","deleteContacts","filter","selectFilter","htmlFor","setFilter","currentTarget","isLoading","selectIsLoading","fetchContacts","Loader"],"sourceRoot":""}